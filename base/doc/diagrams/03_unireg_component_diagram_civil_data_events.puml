@startuml 03_unireg_component_diagram_civil_data_events
!include c4/C4_Container.puml

title Beans Spring des civil data events

Container_Boundary(uniregWeb, "Unireg Web") {

    Container(webEvtCivilEchProcessor, "evtCivilEchProcessor", "EvenementCivilEchProcessorImpl", "Processeur des événements civils des individus")
    Container(webEvtEntrepriseProcessor, "evtEntrepriseProcessorInternal", "EvenementEntrepriseProcessorInternal", "Processeur des événements civils des entreprises")

    Container(webCivilDataEventNotifier, "civilDataEventNotifier", "CivilDataEventNotifierImpl", "Service de notification des changements sur les données civiles")

	Container(webNexusCivilDataEventBridge, "nexusCivilDataEventBridge", "CivilDataEventListenerToNotifierBridge", "Converti les événements en appels de méthodes sur un notifier")
	Container(webNexusCivilDataEventTracing, "nexusCivilDataEventTracing", "CivilDataEventNotifierTracing", "Tracing des appels")
    Container(webIndividuConnectorCache, "individuConnectorCache", "IndividuConnectorCache", "Cache mémoire des données des individus")
    Container(webEntrepriseConnectorCache, "entrepriseConnectorCache", "EntrepriseConnectorCache", "Cache mémoire des données des entreprises")
	Container(webNexusCivilDataEventNotifier, "nexusCivilDataEventRemote", "BasicAuthHttpInvokerProxyFactoryBean", "Invoker Spring-remoting")
    Container(webConcentratingDataEventJmsSender, "concentratingDataEventJmsSender", "ConcentratingDataEventJmsSender", "Regroupe les événements civils pour les émettre au commit de la transaction")
    Container(webDataEventSender, "dataEventSender", "DataEventSenderImpl", "Emetteur des événements JMS vers WS")

	Rel(webEvtCivilEchProcessor, webCivilDataEventNotifier, "Emet des événements")
	Rel(webEvtEntrepriseProcessor, webCivilDataEventNotifier, "Emet des événements")

	Rel(webCivilDataEventNotifier, webNexusCivilDataEventBridge, "Propage les événements")
	Rel(webCivilDataEventNotifier, webEntrepriseConnectorCache, "Propage les événements")
	Rel(webCivilDataEventNotifier, webIndividuConnectorCache, "Propage les événements")
	Rel(webCivilDataEventNotifier, webConcentratingDataEventJmsSender, "Propage les événements")

	Rel(webNexusCivilDataEventBridge, webNexusCivilDataEventTracing, "Délègue")
	Rel_R(webNexusCivilDataEventTracing, webNexusCivilDataEventNotifier, "Délègue")

	Rel(webConcentratingDataEventJmsSender, webDataEventSender, "Emet les événements vers WS")
}

Container_Boundary(uniregNexus, "Unireg Nexus") {

    Container(nexusCivilDataEventRemoteExporter, "civilDataEventNotifierExporter", "HttpInvokerServiceExporter", "Exporter Spring-remoting")
	Container(nexusCivilDataEventNotifier, "civilDataEventNotifier", "CivilDataEventNotifierImpl", "Service de notification des changements sur les données civiles")
    Container(nexusEntrepriseConnectorCache, "entrepriseConnectorCache", "EntrepriseConnectorPersistentCache", "Cache persistent des données des entreprises")
    Container(nexuIndividuConnectorCache, "individuConnectorCache", "IndividuConnectorPersistentCache", "Cache persistent des données des individus")


	Rel(nexusCivilDataEventRemoteExporter, nexusCivilDataEventNotifier, "Propage les appels de méthodes")
	Rel(nexusCivilDataEventNotifier, nexusEntrepriseConnectorCache, "Propage les événements")
	Rel(nexusCivilDataEventNotifier, nexuIndividuConnectorCache, "Propage les événements")
}

Container_Boundary(uniregWS, "Unireg WS") {

    Container(wsDataEventJmsHandler, "dataEventJmsHandler", "DataEventJmsHandler", "Listener des événements JMS en provenance de Web")
	Container(wsCivilDataEventNotifier, "civilDataEventNotifier", "CivilDataEventNotifierImpl", "Service de notification des changements sur les données civiles")

    Container(wsIndividuConnectorCache, "individuConnectorCache", "IndividuConnectorCache", "Cache mémoire des données des individus")
    Container(wsEntrepriseConnectorCache, "entrepriseConnectorCache", "EntrepriseConnectorCache", "Cache mémoire des données des entreprises")
    Container(wsEventDataListenerAdapter, "wsEventDataListenerAdapter", "WebServiceEventListenerAdapter", "Gestionnaire des caches des WS")

    Container(wsPartyService3CacheManager, "partyService3CacheManager", "PartyWebServiceCacheManager", "Manager du cache du WS party3")
    Container(wsv5CacheEventListener, "wsv5CacheEventListener", "BusinessWebServiceCacheEventListener", "Manager du cache du WS v5")
    Container(wsv6CacheEventListener, "wsv6CacheEventListener", "BusinessWebServiceCacheEventListener", "Manager du cache du WS v6")
    Container(wsv7CacheEventListener, "wsv7CacheEventListener", "BusinessWebServiceCacheEventListener", "Manager du cache du WS v7")

	Rel(wsDataEventJmsHandler, wsCivilDataEventNotifier, "Réémet les événements")
	Rel(wsCivilDataEventNotifier, wsEventDataListenerAdapter, "Propage les événements")
	Rel(wsCivilDataEventNotifier, wsIndividuConnectorCache, "Propage les événements")
	Rel(wsCivilDataEventNotifier, wsEntrepriseConnectorCache, "Propage les événements")
	Rel(wsEventDataListenerAdapter, wsPartyService3CacheManager, "Invalide les caches")
	Rel(wsEventDataListenerAdapter, wsv5CacheEventListener, "Invalide les caches")
	Rel(wsEventDataListenerAdapter, wsv6CacheEventListener, "Invalide les caches")
	Rel(wsEventDataListenerAdapter, wsv7CacheEventListener, "Invalide les caches")
}

Rel_D(webNexusCivilDataEventNotifier, nexusCivilDataEventRemoteExporter, "Appelle (synchrone)", "Spring-remoting/HTTP")
Rel_D(webDataEventSender, wsDataEventJmsHandler, "Envoie (asynchrone)", "ESB/XML")

@enduml
