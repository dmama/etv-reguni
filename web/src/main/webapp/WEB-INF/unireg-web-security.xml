<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:security="http://www.springframework.org/schema/security"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
          http://www.springframework.org/schema/security
          http://www.springframework.org/schema/security/spring-security-3.1.xsd
          http://www.springframework.org/schema/aop
          http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<!-- Filtre qui permet de bypasser en développement la sécurité IAM/RefSec en fonction des paramètres du fichier unireg.properties -->
	<bean id="bypassSecurityFilter" class="ch.vd.unireg.security.DevSecurityBypassProcessingFilter" />

	<!-- Bean qui permet d'utiliser le champ 'access' dans les tags authz:authorize -->
	<bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />

	<!-- Récupère les paramètres renseignés par IAM et les stocke dans le context de sécurité -->
	<bean id="iamAuthFilter" class="ch.vd.unireg.security.IAMAuthenticationProcessingFilter">
		<property name="detailsClass" value="ch.vd.unireg.security.UniregSecurityDetails" />
		<property name="allowedRoles">
			<set>
				<value>user</value>
				<value>user_externe</value>
				<value>tester</value>
			</set>
		</property>
	</bean>

	<bean id="accessLoggerFilter" class="ch.vd.unireg.security.AccessLogProcessingFilter" />

	<!-- Limitation du taux de requêtes à l'IHM -->
	<bean id="rateLimiterFilter" class="ch.vd.unireg.security.RateLimiterFilter">
		<property name="enabled" value="${extprop.rateLimiter.enabled}" />
		<property name="maxLoadPerUser" value="${extprop.rateLimiter.maxLoadPerUser}" />
	</bean>

	<!-- Filtre qui stocker la dernière URL valide pour utilisation dans le ActionExceptionResolver -->
	<bean id="actionExceptionFilter" class="ch.vd.unireg.servlet.ActionExceptionFilter" />

	<!-- Filtre qui loggue toutes les exceptions qui sortent directement des autres filtres... !-->
	<bean id="lastChanceExceptionLoggingFilter" class="ch.vd.unireg.servlet.logging.LastChanceExceptionLoggingFilter"/>

	<!-- Filtre sur les adresses IP -->
	<bean id="remoteHostSpringFilter" class="ch.vd.unireg.servlet.security.RemoteHostSpringFilter">
		<property name="allowed" value="${extprop.remoteHostFilter.allow}" />
		<property name="denied" value="${extprop.remoteHostFilter.deny}" />
	</bean>

	<!-- Filtre de choix de l'OId -->
	<bean id="chooseOIDFilter" class="ch.vd.unireg.security.ChooseOIDProcessingFilter">
		<property name="serviceSecurite" ref="serviceSecuriteService" />
	</bean>

	<!-- Récupère le profil de sécurité et le stocke dans le context de sécurité -->
	<bean id="securiteProfileFilter" class="ch.vd.unireg.security.SecuriteProfileProcessingFilter">
		<property name="serviceSecurite" ref="serviceSecuriteService" />
	</bean>

	<!-- ======================== FILTER CHAIN ======================= -->

	<!-- La chaine des filtres Spring à appliquer. -->
	<bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
		<!-- [SIFISC-29155] Attention ! Les patterns sont case-sensitives depuis Spring 4 ! -->
		<security:filter-chain-map request-matcher="ant">
			<!-- la page d'erreur 403 ne doit pas vérifier l'adresse IP car c'est vers elle que le remoteHostSpringFilter renvoie quand l'adresse IP n'est pas autorisée -->
			<security:filter-chain pattern="/errors/403.do" filters="lastChanceExceptionLoggingFilter,securityContextPersistenceFilter" />
			<security:filter-chain pattern="/errors/**"     filters="lastChanceExceptionLoggingFilter,remoteHostSpringFilter,securityContextPersistenceFilter" />
			<!-- WS et remoting -->
			<security:filter-chain pattern="/ws/**"         filters="lastChanceExceptionLoggingFilter,remoteHostSpringFilter,braveServletFilter" />
			<security:filter-chain pattern="/remoting/**"   filters="lastChanceExceptionLoggingFilter,remoteHostSpringFilter,braveServletFilter" />
			<!-- login/logout -->
			<security:filter-chain pattern="/logoutIAM.do"  filters="lastChanceExceptionLoggingFilter,remoteHostSpringFilter,securityContextPersistenceFilter" />
			<security:filter-chain pattern="/chooseOID.do"  filters="lastChanceExceptionLoggingFilter,remoteHostSpringFilter,securityContextPersistenceFilter,braveServletFilter,${iam-security-filters}" />
			<!-- les pages normales -->
			<security:filter-chain pattern="/**/*.do"       filters="lastChanceExceptionLoggingFilter,remoteHostSpringFilter,securityContextPersistenceFilter,braveServletFilter,
																	 exceptionTranslationFilter,${iam-security-filters},accessLoggerFilter,rateLimiterFilter,chooseOIDFilter,securiteProfileFilter,
																	 contextHolderAwareRequestFilter,actionExceptionFilter" />
			<!-- les ressources statiques -->
			<security:filter-chain pattern="/**"            filters="lastChanceExceptionLoggingFilter,securityContextPersistenceFilter" />
		</security:filter-chain-map>
	</bean>

	<!-- ======================== AUTHENTICATION ======================= -->

	<bean id="securityDebugConfig" class="ch.vd.unireg.security.SecurityDebugConfig">
		<property name="properties" ref="uniregExternalProperties" />
		<property name="serviceSecurite" ref="serviceSecuriteService" />
	</bean>

	<!-- ===================== HTTP REQUEST SECURITY ==================== -->

	<!-- the fourth item in the chain: securityEnforcementFilter -->
	<bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<constructor-arg>
			<bean class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
				<constructor-arg value="/errors/authenticationFailed.do" />
			</bean>
		</constructor-arg>
		<property name="accessDeniedHandler">
			<bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
				<property name="errorPage" value="/errors/403.do"/>
			</bean>
		</property>
	</bean>

	<!-- Handles any AccessDeniedException and AuthenticationException thrown within the filter chain -->
	<bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
		<property name="forceEagerSessionCreation" value="true"/> <!-- à vrai pour éviter un warning du context persistence storage lors du retour de requêtes JSON -->
	</bean>

	<!-- Allow the use of getRemoteUser(), getUserPrincipal(), etc on request for Spring Security -->
	<bean id="contextHolderAwareRequestFilter" class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter"/>

	<!-- ================================================================ -->

	<bean id="securiteDossierService" class="ch.vd.unireg.security.SecuriteDossierServiceImpl">
		<property name="securityProvider" ref="securityProviderInterface" />
		<property name="serviceSecurite" ref="serviceSecuriteService" />
		<property name="tiersDAO" ref="tiersDAO" />
		<property name="droitAccesDAO" ref="droitAccesDAO" />
	</bean>

	<bean id="securityProviderImpl" class="ch.vd.unireg.security.SecurityProviderImpl" depends-on="securityDebugConfig,auditManager">
		<property name="securiteDossierService" ref="securiteDossierService" />
		<property name="securiteService" ref="serviceSecuriteService" />
		<property name="audit" ref="auditManager"/>
	</bean>

	<bean id="securityProviderCache" class="ch.vd.unireg.security.SecurityProviderCache">
		<property name="target" ref="securityProviderImpl" />
		<property name="cache">
			<bean class="net.sf.ehcache.Ehcache" factory-bean="ehCacheManager" factory-method="getCache">
				<constructor-arg value="securityProvider" />
			</bean>
		</property>
		<property name="dataEventService" ref="dataEventService" />
		<property name="tiersDAO" ref="tiersDAO" />
		<property name="droitAccesDAO" ref="droitAccesDAO" />
		<property name="uniregCacheManager" ref="uniregCacheManager" />
		<property name="preloadTiersIds" value="false"/>
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<alias alias="securityProviderInterface" name="securityProviderCache"/>

	<!-- Proxys Automatiques pour les classes advisées avec un aspect AspectJ -->
	<aop:aspectj-autoproxy/>
	<!-- Aspect pour géreer la sécurité applicative de manière déclarative avec l'annotation unireg @SecurityCheck -->
	<bean id="securityCheckAspect" class="ch.vd.unireg.security.SecurityCheckAspect">
		<property name="securityProvider" ref="securityProviderInterface"/>
	</bean>

</beans>
