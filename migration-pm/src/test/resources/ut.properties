#
# Modes FROM_DUMP et DIRECT (= output vers Unireg)
#

# Connection to RCPers
rcpers.url=http://rp-ws-va.etat-de-vaud.ch/registres/rcpers/west/ws/v5
rcpers.user=gvd0unireg
rcpers.password=Welc0me_

# Connection to RCEnt
# Intégration
#rcent.url=http://slv2737v.etat-de-vaud.ch:8040/services/v3
rcent.url=http://rp-ws-va.etat-de-vaud.ch/registres/int-rcent/services/v3
# Préprod
#rcent.url=http://rp-ws-va.etat-de-vaud.ch/registres/rcent/services/v3
# Prod
#rcent.url=http://rp-ws-pr.etat-de-vaud.ch/registres/rcent/ws/services
rcent.user=gvd0unireg
rcent.password=Welc0me_
rcent.validate=true
rcent.enabled=true
rcent.frqPriseEnCompte=1

# Connection to FiDoR
fidor.url=http://rp-ws-va.etat-de-vaud.ch/fiscalite/int-fidor/ws/v5
fidor.user=gvd0unireg
fidor.password=Welc0me_

# Connection to Unireg's H2 DB (r/w !!)
unireg.jdbc.driver.class=org.h2.Driver
unireg.jdbc.url=jdbc:h2:mem:test;MODE=Oracle
unireg.jdbc.user=sa
unireg.jdbc.password=sa
unireg.jdbc.pool.size=4

# répertoire du mini-indexeur pour les non-habitants existants d'Unireg
indexeur.nh.dir=/tmp/indexeur-nh-test

# faut-il re-créer (true, a priori pour la production) un nouvel indexeur des non-habitants ou utiliser l'existant (false, en tests...)
indexeur.nh.create=false
indexeur.nh.threads.nb=1

# la migration doit-elle être lancée (false pendant les tests unitaires...)
migrator.enabled=false

# nombre de threads utilisés par la migration (en écriture dans Unireg) - doit être inférieur ou égal à ${unireg.jdbc.pool.size}
migrator.threads.nb=1

# Fichier de configuration des mappings pour les numéros d'ordre poste
mapping.noOrdreP.file=src/main/config/donnees-disparues-refinf-avec-candidats.csv

# Fichier de configuration des numéros des entreprises encore actives au niveau de la perception
# (une ligne par numéro, chaque numéro présent seul avec un flag ADB_SEUL sur la ligne)
activite.flag.perception.file=

# Fichier CSV généré par le script buildMunicipalityData.sh à partir des données brutes RefInf
fusions.communes.file=src/test/config/municipalityData.csv

# Fichier CSV en entrée qui liste les contribuables PM dont on sait qu'ils sont des doublons et doivent être annulés
# (une ligne par numéro, seule la première colonne prise en compte), ignoré si vide
doublons.file=

# Les dates antérieures à cette date (format DD.MM.AAAA) sont considérées comme "louches" (et logguées en WARN)
seuil.date.normale=01.01.1900

# Date (au format DD.MM.AAAA) qui indique le seuil au-delà duquel une entreprise est considérée comme active
seuil.activite=01.01.2015

# Les mandats fermés avant cette date (format DD.MM.AAAA) ne sont pas repris
seuil.mandats.repris=01.01.2008


#
# Modes DUMP et DIRECT (= input depuis DB2)
#

# Connection to RegPM's DB2 database (ro)
regpm.jdbc.driver.class=com.ibm.db2.jcc.DB2Driver
regpm.jdbc.url=jdbc:db2://ssv0214v:50000/DB2A
regpm.jdbc.schema=CIIV1
regpm.jdbc.user=W#ASIZV1
regpm.jdbc.password=tao0603
regpm.jdbc.pool.size=1

# fichier des numéros de PM (dans RegPM) à prendre en compte dans la migration en provenance de RegPM
# (une ligne par numéro, chaque numéro présent seul sur la ligne)
# si la variable est vide, tout est pris depuis RegPM (= ce sera la configuration de production)
migration.test.extracted.pm.file=


#
# Mode DUMP et FROM_DUMP (= interaction avec un dump)
#

# répertoire utilisé pour les modes DUMP et FROM_DUMP
migration.dump.dir=/tmp/pm-dump-test
