<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

	<display-name>Unireg Nexus - Le cache unifié d'Unireg</display-name>

    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>unireg-nexus</param-value>
    </context-param>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/unireg-nexus-properties.xml
			/WEB-INF/unireg-nexus-*.xml
		</param-value>
	</context-param>
	
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>${unireg-nexus.log4j.location}</param-value>
	</context-param>

    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>30000</param-value>
    </context-param>
	
	<context-param>
		<!-- On ne peut pas exposer le webapp root si le war est pas expandé -->
		<param-name>log4jExposeWebAppRoot</param-name>
		<param-value>false</param-value>
	</context-param>

	<!--  Les servlets de notre application -->
	<servlet>
		<servlet-name>uniregServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				<!-- Cette propriété doit exister mais être vide ! Parce qu'autrement, le DispatcherServlet veut créer
				son propre context Spring à partir du fichier <servlet-name>-context.xml, et c'est pas ce que l'on veut. -->
			</param-value>
		</init-param>
		<load-on-startup>3</load-on-startup>
	</servlet>
	
	<!--  Mapping entre les servlets et les URLs qu'elles servent -->
	<servlet-mapping>
		<servlet-name>uniregServlet</servlet-name>
		<url-pattern>*.remoting</url-pattern>
	</servlet-mapping>

	<!-- Sécurisation des web-services -->
	<security-constraint>
		<web-resource-collection>
			<web-resource-name>Unireg Remoting</web-resource-name>
			<url-pattern>*.remoting</url-pattern>
			<http-method>GET</http-method>
			<http-method>POST</http-method>
		</web-resource-collection>
		<auth-constraint>
			<role-name>unireg-remoting</role-name>
		</auth-constraint>
	</security-constraint>

	<login-config>
		<auth-method>BASIC</auth-method>
		<realm-name>security</realm-name>
	</login-config>
	<security-role>
		<role-name>unireg-remoting</role-name>
	</security-role>

	<!-- Les listener de notre application -->
	<listener>
 		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<listener>
		<!-- permet de redéployer unireg dans Tomcat sans obtenir une erreur de lecture sur ehcache.xml -->
		<!-- voir http://ehcache.sourceforge.net/documentation/shutdown.html -->
		<listener-class>net.sf.ehcache.constructs.web.ShutdownListener</listener-class>
	</listener>

	<!-- Les filters de notre application -->
	<filter>
		<filter-name>springSecurityFilter</filter-name>
		<!-- Ce bean va déléguer les appels au bean 'filterChainProxy' -->
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
		<init-param>
			<param-name>targetBeanName</param-name>
			<param-value>filterChainProxy</param-value>
		</init-param>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

</web-app>
