package ch.vd.unireg.interfaces.organisation.data;

import java.util.HashMap;
import java.util.Map;

import org.jetbrains.annotations.Nullable;

/**
 * Les différentes formes légale en provenance du registre des entreprises
 */
public enum FormeLegale {

	N_00_AUTRE("00"),
	N_01_FORMES_JUR_DE_DROIT_PRIVE_UTILISEES_DANS_RC("01"),
	N_0101_ENTREPRISE_INDIVIDUELLE("0101"),
	N_0103_SOCIETE_NOM_COLLECIF("0103"),
	N_0104_SOCIETE_EN_COMMANDITE("0104"),
	N_0105_SOCIETE_EN_COMMANDITE_PAR_ACTIONS("0105"),
	N_0106_SOCIETE_ANONYME("0106"),
	N_0107_SOCIETE_A_RESPONSABILITE_LIMITE("0107"),
	N_0108_SOCIETE_COOPERATIVE("0108"),
	N_0109_ASSOCIATION("0109"),
	N_0110_FONDATION("0110"),
	N_0111_FILIALE_ETRANGERE_AU_RC("0111"),
	N_0113_FORME_JURIDIQUE_PARTICULIERE("0113"),
	N_0114_SOCIETE_EN_COMMANDITE_POUR_PLACEMENTS_CAPITAUX("0114"),
	N_0115_SOCIETE_INVESTISSEMENT_CAPITAL_VARIABLE("0115"),
	N_0116_SOCIETE_INVESTISSEMENT_CAPITAL_FIXE("0116"),
	N_0117_INSTITUT_DE_DROIT_PUBLIC("0117"),
	N_0118_PROCURATIONS_NON_COMMERCIALES("0118"),
	N_0119_CHEF_INDIVISION("0119"),
	N_0151_SUCCURSALE_SUISSE_AU_RC("0151"),
	N_02_FORMES_JUR_DE_DROIT_PUBLIC_NON_UTILISEES_DANS_RC("02"),
	N_0220_ADMINISTRATION_CONFEDERATION("0220"),
	N_0221_ADMINISTRATION_CANTON("0221"),
	N_0222_ADMINISTRATION_DISTRICT("0222"),
	N_0223_ADMINISTRATION_COMMUNE("0223"),
	N_0224_CORPORATION_DE_DROIT_PUBLIC_ADMINISTRATION("0224"),
	N_0230_ENTREPRISE_CONFEDERATION("0230"),
	N_0231_ENTREPRISE_CANTON("0231"),
	N_0232_ENTREPRISE_DISTRICT("0232"),
	N_0233_ENTREPRISE_COMMUNE("0233"),
	N_0234_CORPORATION_DE_DROIT_PUBLIC_ENTREPRISE("0234"),
	N_03_AUTRES_FORMES_JUR_NON_UTILISEES_DANS_RC("03"),
	N_0302_SOCIETE_SIMPLE("0302"),
	N_0312_FILIALE_ETRANGERE_NON_AU_RC("0312"),
	N_0327_ENTREPRISE_PUBLIQUE_ETRANGERE("0327"),
	N_0328_ADMINISTRATION_PUBLIQUE_ETRANGERE("0328"),
	N_0329_ORGANISATION_INTERNATIONALE("0329"),
	N_04_ENTREPRISE_ETRANGERE("04"),
	N_0441_ENTREPRISE_ETRANGERE("0441");

	private final String code;

	private static final Map<String, FormeLegale> byCode;

	static {
		byCode = new HashMap<>(FormeLegale.values().length);
		for (FormeLegale fl : FormeLegale.values()) {
			final FormeLegale old = byCode.put(fl.code, fl);
			if (old != null) {
				throw new IllegalArgumentException(String.format("Code %s utilisé plusieurs fois !", old.code));
			}
		}
	}

	FormeLegale(String code) {
		this.code = code;
	}

	public String getCode() {
		return this.code;
	}

	@Nullable
	public static FormeLegale fromCode(String code) {
		return byCode.get(code);
	}
}
