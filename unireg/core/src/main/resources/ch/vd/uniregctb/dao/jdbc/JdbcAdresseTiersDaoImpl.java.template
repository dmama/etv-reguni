package ch.vd.uniregctb.dao.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import ch.vd.common.model.EnumTypeAdresse;
import ch.vd.registre.base.date.RegDate;
import ch.vd.registre.base.utils.Pair;
import ch.vd.uniregctb.adresse.AdresseAutreTiers;
import ch.vd.uniregctb.adresse.AdresseCivile;
import ch.vd.uniregctb.adresse.AdresseEtrangere;
import ch.vd.uniregctb.adresse.AdressePM;
import ch.vd.uniregctb.adresse.AdresseSuisse;
import ch.vd.uniregctb.adresse.AdresseTiers;
import ch.vd.uniregctb.common.CollectionsUtils;
import ch.vd.uniregctb.type.TexteCasePostale;
import ch.vd.uniregctb.type.TypeAdressePM;
import ch.vd.uniregctb.type.TypeAdresseTiers;

public class JdbcAdresseTiersDaoImpl implements JdbcAdresseTiersDao {

	private static final AdresseTiersMapper ROW_MAPPER = new AdresseTiersMapper();

	@SuppressWarnings({"unchecked"})
	public AdresseTiers get(long forId, JdbcTemplate template) {
		final Pair<Long, AdresseTiers> pair = (Pair<Long, AdresseTiers>) DataAccessUtils.uniqueResult(template.query(AdresseTiersMapper.selectById(), new Object[]{forId}, ROW_MAPPER));
		return pair.getSecond();
	}

	@SuppressWarnings({"unchecked"})
	public Set<AdresseTiers> getForTiers(long tiersId, JdbcTemplate template) {
		final List<Pair<Long, AdresseTiers>> list = template.query(AdresseTiersMapper.selectByTiersId(), new Object[]{tiersId}, ROW_MAPPER);
		final HashSet<AdresseTiers> set = new HashSet<AdresseTiers>(list.size());
		for (Pair<Long, AdresseTiers> pair : list) {
			set.add(pair.getSecond());
		}
		return set;
	}

	@SuppressWarnings({"unchecked"})
	public Map<Long, Set<AdresseTiers>> getForTiers(Collection<Long> tiersId, final JdbcTemplate template) {
		
		// Découpe la requête en sous-requêtes si nécessaire
		final List<Pair<Long, AdresseTiers>> list = CollectionsUtils.splitAndProcess(tiersId, JdbcDaoUtils.MAX_IN_SIZE, new CollectionsUtils.SplitCallback<Long, Pair<Long, AdresseTiers>>() {
			public List<Pair<Long, AdresseTiers>> process(List<Long> ids) {
				return template.query(AdresseTiersMapper.selectByTiersIds(ids), ROW_MAPPER);
			}
		});

		final HashMap<Long, Set<AdresseTiers>> map = new HashMap<Long, Set<AdresseTiers>>();
		for (Pair<Long, AdresseTiers> pair : list) {
			Set<AdresseTiers> set = map.get(pair.getFirst());
			if (set == null) {
				set = new HashSet<AdresseTiers>();
				map.put(pair.getFirst(), set);
			}
			set.add(pair.getSecond());
		}
		return map;
	}

	private static class AdresseTiersMapper implements RowMapper {
		private static final String BASE_SELECT = "select " +
				${BASE_SELECT};

		public static String selectById() {
			return BASE_SELECT + " where ${PRIMARY_KEY} = ?";
		}

		public static String selectByTiersId() {
			return BASE_SELECT + " where ${FOREIGN_KEY} = ?";
		}

		public static String selectByTiersIds(Collection<Long> tiersId) {
			return BASE_SELECT + " where ${FOREIGN_KEY} in " + JdbcDaoUtils.buildInClause(tiersId);
		}

		public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
			${MAPPING_CODE}
		}
	}
}
