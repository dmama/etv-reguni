package ch.vd.uniregctb.dao.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import ch.vd.registre.base.utils.Pair;
import ch.vd.uniregctb.common.CollectionsUtils;
import ch.vd.uniregctb.declaration.ModeleDocument;
import ch.vd.uniregctb.declaration.ModeleFeuilleDocument;
import ch.vd.uniregctb.declaration.PeriodeFiscale;
import ch.vd.uniregctb.type.TypeDocument;

public class JdbcModeleDocumentDaoImpl implements JdbcModeleDocumentDao {

	private static final ModeleDocumentMapper ROW_MAPPER = new ModeleDocumentMapper();

	private JdbcModeleFeuilleDocumentDao ppfDao = new JdbcModeleFeuilleDocumentDaoImpl();

	@Override
	@SuppressWarnings({"unchecked"})
	public ModeleDocument get(long periodeId, JdbcTemplate template) {

		final Pair<Long, ModeleDocument> pair = (Pair<Long, ModeleDocument>) DataAccessUtils.uniqueResult(template.query(ModeleDocumentMapper.selectById(), new Object[]{periodeId}, ROW_MAPPER));
		final ModeleDocument modele = pair.getSecond();
		if (modele == null) {
			return null;
		}

		final Set<ModeleFeuilleDocument> feuilles = ppfDao.getForPeriode(periodeId, template);
		for (ModeleFeuilleDocument f : feuilles) {
			f.setModeleDocument(modele);
		}
		modele.setModelesFeuilleDocument(feuilles);

		return modele;
	}

	@Override
	@SuppressWarnings({"unchecked"})
	public List<ModeleDocument> getList(final Collection<Long> periodesId, final JdbcTemplate template) {

		// Découpe la requête en sous-requêtes si nécessaire
		final List<ModeleDocument> list = CollectionsUtils.splitAndProcess(periodesId, JdbcDaoUtils.MAX_IN_SIZE, new CollectionsUtils.SplitCallback<Long, ModeleDocument>() {
			@Override
			public List<ModeleDocument> process(List<Long> ids) {
				return template.query(ModeleDocumentMapper.selectByIds(ids), ROW_MAPPER);
			}
		});

		final Map<Long, Set<ModeleFeuilleDocument>> map = ppfDao.getForPeriode(periodesId, template);
		for (ModeleDocument modele : list) {
			Set<ModeleFeuilleDocument> feuilles = map.get(modele.getId());
			if (feuilles == null) {
				feuilles = Collections.emptySet();
			}
			else {
				for (ModeleFeuilleDocument f : feuilles) {
					f.setModeleDocument(modele);
				}
			}
			modele.setModelesFeuilleDocument(feuilles);
		}

		return list;
	}
	
	private static class ModeleDocumentMapper implements RowMapper {
		private static final String BASE_SELECT = "select " +
				${BASE_SELECT};

		public static String selectById() {
			return BASE_SELECT + " where ${PRIMARY_KEY} = ?";
		}

		public static String selectByIds(Collection<Long> tiersId) {
			return BASE_SELECT + " where NUMERO in " + JdbcDaoUtils.buildInClause(tiersId);
		}

		@Override
		public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
			${MAPPING_CODE}
		}
		
		private PeriodeFiscale getPeriodeFiscale(Long periodeId) {
			return null;  // TODO (msi)
		}
	}
}
