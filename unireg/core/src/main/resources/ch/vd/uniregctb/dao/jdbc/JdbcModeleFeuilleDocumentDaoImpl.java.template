package ch.vd.uniregctb.dao.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.dao.support.DataAccessUtils;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import ch.vd.registre.base.utils.Pair;
import ch.vd.uniregctb.common.CollectionsUtils;
import ch.vd.uniregctb.declaration.ModeleFeuilleDocument;

public class JdbcModeleFeuilleDocumentDaoImpl implements JdbcModeleFeuilleDocumentDao {

	private static final ModeleFeuilleDocumentMapper ROW_MAPPER = new ModeleFeuilleDocumentMapper();

	@SuppressWarnings({"unchecked"})
	public ModeleFeuilleDocument get(long forId, JdbcTemplate template) {
		final Pair<Long, ModeleFeuilleDocument> pair = (Pair<Long, ModeleFeuilleDocument>) DataAccessUtils.uniqueResult(template.query(ModeleFeuilleDocumentMapper.selectById(), new Object[]{forId}, ROW_MAPPER));
		return pair.getSecond();
	}

	@SuppressWarnings({"unchecked"})
	public Set<ModeleFeuilleDocument> getForPeriode(long periodeId, JdbcTemplate template) {
		final List<Pair<Long, ModeleFeuilleDocument>> list = template.query(ModeleFeuilleDocumentMapper.selectByTiersId(), new Object[]{periodeId}, ROW_MAPPER);
		final HashSet<ModeleFeuilleDocument> set = new HashSet<ModeleFeuilleDocument>(list.size());
		for (Pair<Long, ModeleFeuilleDocument> pair : list) {
			set.add(pair.getSecond());
		}
		return set;
	}

	@SuppressWarnings({"unchecked"})
	public Map<Long, Set<ModeleFeuilleDocument>> getForPeriode(Collection<Long> periodeIds, final JdbcTemplate template) {

		// Découpe la requête en sous-requêtes si nécessaire
		final List<Pair<Long, ModeleFeuilleDocument>> list = CollectionsUtils.splitAndProcess(periodeIds, JdbcDaoUtils.MAX_IN_SIZE, new CollectionsUtils.SplitCallback<Long, Pair<Long, ModeleFeuilleDocument>>() {
			public List<Pair<Long, ModeleFeuilleDocument>> process(List<Long> ids) {
				return template.query(ModeleFeuilleDocumentMapper.selectByTiersIds(ids), ROW_MAPPER);
			}
		});

		final HashMap<Long, Set<ModeleFeuilleDocument>> map = new HashMap<Long, Set<ModeleFeuilleDocument>>();
		for (Pair<Long, ModeleFeuilleDocument> pair : list) {
			Set<ModeleFeuilleDocument> set = map.get(pair.getFirst());
			if (set == null) {
				set = new HashSet<ModeleFeuilleDocument>();
				map.put(pair.getFirst(), set);
			}
			set.add(pair.getSecond());
		}
		return map;
	}

	private static class ModeleFeuilleDocumentMapper implements RowMapper {
		private static final String BASE_SELECT = "select " +
				${BASE_SELECT};

		public static String selectById() {
			return BASE_SELECT + " where ${PRIMARY_KEY} = ?";
		}

		public static String selectByTiersId() {
			return BASE_SELECT + " where ${FOREIGN_KEY} = ?";
		}

		public static String selectByTiersIds(Collection<Long> periodeIds) {
			return BASE_SELECT + " where ${FOREIGN_KEY} in " + JdbcDaoUtils.buildInClause(periodeIds);
		}

		public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
			${MAPPING_CODE}
		}
	}
}
