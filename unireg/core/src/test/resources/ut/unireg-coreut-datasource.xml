<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">

	<!-- Audit -->
	<bean id="auditManager" class="ch.vd.uniregctb.audit.AuditManager">
		<property name="auditLineDAO" ref="auditLineDAO" />
		<property name="appName" value="Unit Tests" />
	</bean>

	<!-- Transaction manager configuration -->

	<bean id="atomikosSystemProps" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject">
			<!-- System.getProperties() -->
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetClass" value="java.lang.System" />
				<property name="targetMethod" value="getProperties" />
			</bean>
		</property>
		<property name="targetMethod" value="putAll" />
		<property name="arguments">
			<!-- The new Properties -->
			<util:properties>
				<prop key="com.atomikos.icatch.hide_init_file_path">true</prop>
				<prop key="com.atomikos.icatch.registered">so what?</prop>          <!-- pour enlever le message de pub au démarrage -->
			</util:properties>
		</property>
	</bean>

	<bean id="userTransactionService" class="com.atomikos.icatch.config.UserTransactionServiceImp" init-method="init" destroy-method="shutdownForce" depends-on="atomikosSystemProps">
		<constructor-arg>
			<props>
				<prop key="com.atomikos.icatch.max_timeout">0</prop>                <!-- en millisecondes, la durée maximale admissible pour le timeout d'une transaction : aucune -->
				<prop key="com.atomikos.icatch.default_jta_timeout">300000</prop>   <!-- en millisecondes, le timeout par défaut d'une transaction JTA : 5min -->
				<prop key="com.atomikos.icatch.log_base_dir">${java.io.tmpdir}</prop>
				<prop key="com.atomikos.icatch.service">com.atomikos.icatch.standalone.UserTransactionServiceFactory</prop>
				<prop key="com.atomikos.icatch.enable_logging">false</prop>         <!-- désactivation des logs de transaction pendant les tests unitaires -->
				<prop key="com.atomikos.icatch.max_actives">-1</prop>               <!-- valeur négative -> pas de nombre maximum de transactions ouvertes simultanément -->
			</props>
		</constructor-arg>
	</bean>

	<!-- Transaction manager -->

	<bean id="userTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close" depends-on="userTransactionService">
		<!-- disable startup because the userTransactionService bean does it -->
		<property name="startupTransactionService" value="false"/>
		<!-- when close is called, should we force transactions to terminate or not? -->
		<property name="forceShutdown" value="false"/>
	</bean>

	<bean id="userTransaction" class="com.atomikos.icatch.jta.UserTransactionImp" depends-on="userTransactionService">
		<property name="transactionTimeout" value="300"/>
	</bean>

	<bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager" depends-on="userTransactionService">
		<property name="transactionManager" ref="userTransactionManager"/>
		<property name="userTransaction" ref="userTransaction"/>
	</bean>

	<!-- JDBC datasource -->

	<bean id="xaDataSource" class="ch.vd.uniregctb.datasource.DynamicDataSource">
		<property name="jdbcProfile" value="${testprop.jdbc.profile}" />
		<property name="oracleDriverClassName" value="${oracle.jdbc.driverClassName}" />
		<property name="oracleUrl" value="${testprop.oracle.jdbc.url}" />
		<property name="oracleUsername" value="${testprop.oracle.jdbc.username}" />
		<property name="oraclePassword" value="${testprop.oracle.jdbc.password}" />
		<property name="postgresqlDriverClassName" value="${postgresql.jdbc.driverClassName}" />
		<property name="postgresqlUrl" value="${testprop.postgresql.jdbc.url}" />
		<property name="postgresqlUsername" value="${testprop.postgresql.jdbc.username}" />
		<property name="postgresqlPassword" value="${testprop.postgresql.jdbc.password}" />
	</bean>

	<bean id="realDataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close">
		<property name="uniqueResourceName">
			<!-- utilisé pour re-générer un nom différent à chaque datasource au moment de l'instantiation de chaque context Spring pendant les tests UT -->
			<bean class="ch.vd.uniregctb.common.ResourceNameFactory">
				<constructor-arg value="jdbc-"/>
			</bean>
		</property>
		<property name="xaDataSource" ref="xaDataSource"/>
		<property name="maxPoolSize" value="50"/>
		<property name="minPoolSize" value="10"/>
	</bean>

	<alias alias="dataSource" name="realDataSource"/>
	<alias alias="rawDataSource" name="realDataSource"/>

	<bean id="hibernateDialect" class="ch.vd.uniregctb.datasource.DynamicHibernateDialect">
		<property name="jdbcProfile" value="${testprop.jdbc.profile}" />
		<property name="oracleDialectClass" value="${oracle.hibernate.dialect}" />
		<property name="postgresqlDialectClass" value="${postgresql.hibernate.dialect}" />
	</bean>

	<bean id="hibernateDialectClassName" class="ch.vd.uniregctb.datasource.DynamicString">
		<property name="jdbcProfile" value="${testprop.jdbc.profile}" />
		<property name="oracleProperty" value="${oracle.hibernate.dialect}" />
		<property name="postgresqlProperty" value="${postgresql.hibernate.dialect}" />
	</bean>

	<bean id="hibernateQuerySubstitutions" class="ch.vd.uniregctb.datasource.DynamicString">
		<property name="jdbcProfile" value="${testprop.jdbc.profile}" />
		<property name="oracleProperty" value="${oracle.hibernate.query.substitutions}" />
		<property name="postgresqlProperty" value="${postgresql.hibernate.query.substitutions}" />
	</bean>

	<!-- hibernateProperties specifiques à cette datasource. -->
	<util:map id="hibernateProperties">
		<entry key="hibernate.connection.autocommit" value="false" />
		<entry key="hibernate.query.factory_class" value="org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory" />
		<entry key="hibernate.transaction.manager_lookup_class" value="com.atomikos.icatch.jta.hibernate3.TransactionManagerLookup"/>
		<entry key="hibernate.dialect" value-ref="hibernateDialectClassName" />
		<entry key="hibernate.query.substitutions" value-ref="hibernateQuerySubstitutions" />
		<entry key="hibernate.show_sql" value="false" />
		<entry key="hibernate.jdbc.batch_size" value="0" />
		<entry key="hibernate.jdbc.use_streams_for_binary" value="true" />
		<entry key="hibernate.hbm2ddl.auto" value="create" />
	</util:map>

</beans>
