<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<bean id="propertiesLogger" class="ch.vd.uniregctb.common.SpringPropertiesLogger">
		<constructor-arg value="Business - Properties provenant de la config Maven" />
		<property name="hibernateDialect" ref="hibernateDialect"/>
		<property name="jdbcDriverClassName">
			<bean class="ch.vd.uniregctb.datasource.DynamicString">
				<property name="jdbcProfile" value="${testprop.jdbc.profile}" />
				<property name="oracleProperty" value="${oracle.jdbc.driverClassName}" />
				<property name="postgresqlProperty" value="${postgresql.jdbc.driverClassName}" />
			</bean>
		</property>
		<property name="jdbcUrl">
			<bean class="ch.vd.uniregctb.datasource.DynamicString">
				<property name="jdbcProfile" value="${testprop.jdbc.profile}" />
				<property name="oracleProperty" value="${testprop.oracle.jdbc.url}" />
				<property name="postgresqlProperty" value="${testprop.postgresql.jdbc.url}" />
			</bean>
		</property>
		<property name="jdbcUsername">
			<bean class="ch.vd.uniregctb.datasource.DynamicString">
				<property name="jdbcProfile" value="${testprop.jdbc.profile}" />
				<property name="oracleProperty" value="${testprop.oracle.jdbc.username}" />
				<property name="postgresqlProperty" value="${testprop.postgresql.jdbc.username}" />
			</bean>
		</property>
		<property name="properties"
			value="
                | Index path UT           : ${testprop.indexer.globalIndexPath}
                | Docs repository UT      : ${testprop.documents.repository}
                " />
	</bean>

	<!-- File based -->
	<bean id="fileGlobalTiersIndexDirectory" class="ch.vd.uniregctb.indexer.lucene.FSIndexProvider" lazy-init="true">
		<constructor-arg value="${testprop.indexer.globalIndexPath}/tiers" />
	</bean>

	<bean id="fileGlobalMessageIdentificationIndexDirectory" class="ch.vd.uniregctb.indexer.lucene.FSIndexProvider" lazy-init="true">
		<constructor-arg value="${testprop.indexer.globalIndexPath}/message-identification" />
	</bean>

	<bean id="docService" class="ch.vd.uniregctb.document.DocumentServiceImpl" lazy-init="true">
		<property name="hibernateTemplate" ref="hibernateTemplate" />
		<property name="repository" value="${testprop.documents.repository}" />
	</bean>

    <!-- Override du tache service défini dans unireg-business-service.xml pour éviter de devoir
    ajouter toutes les collectivités administratives (oids) et devoir modifier tous les tests -->
    <bean id="tacheService" class="ch.vd.uniregctb.tache.MockTacheService"/>

	<!-- Validateur de test qui permet de tester la classe abstraite ForFiscalValitator -->
	<bean id="concreteTestForFiscalValidator" class="ch.vd.uniregctb.validation.fors.ConcreteForFiscalValidator" parent="forFiscalValidator"/>

	<!-- Override du global index pour supporter plusieurs contextes Spring en parallèle -->
	<bean id="globalTiersIndexRaw" class="ch.vd.uniregctb.indexer.StaticSingletonGlobalIndex">
		<constructor-arg value="tiers"/>
		<constructor-arg ref="fileGlobalTiersIndexDirectory" />
	</bean>
	<bean id="globalMessageIdentificationIndexRaw" class="ch.vd.uniregctb.indexer.StaticSingletonGlobalIndex">
		<constructor-arg value="identification"/>
		<constructor-arg ref="fileGlobalMessageIdentificationIndexDirectory" />
	</bean>

	<bean id="evenementDocumentSortantSender" class="ch.vd.uniregctb.evenement.docsortant.MockEvenementDocumentSortantSender"/>

	<bean id="statsService" class="ch.vd.uniregctb.stats.StatsServiceImpl">
		<property name="logPeriode" value="0"/>
	</bean>

	<bean id="fourreNeutreHelper" class="ch.vd.uniregctb.fourreNeutre.MockFourreNeutreHelper"/>

</beans>
