package ch.vd.unireg.metier.periodeexploitation;

import java.util.Collections;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import ch.vd.registre.base.date.DateRange;
import ch.vd.unireg.interfaces.infra.mock.MockCommune;
import ch.vd.unireg.interfaces.infra.mock.MockTypeRegimeFiscal;
import ch.vd.unireg.interfaces.service.mock.ProxyServiceInfrastructureService;
import ch.vd.unireg.metier.periodeexploitation.PeriodeExploitationService.PeriodeContext;
import ch.vd.unireg.parametrage.MockParameterAppService;
import ch.vd.unireg.regimefiscal.RegimeFiscalServiceImpl;
import ch.vd.unireg.tiers.Entreprise;
import ch.vd.unireg.tiers.ForFiscalPrincipalPM;
import ch.vd.unireg.tiers.RegimeFiscal;
import ch.vd.unireg.type.GenreImpot;
import ch.vd.unireg.type.TypeAutoriteFiscale;

import static ch.vd.unireg.common.AbstractSpringTest.assertRange;
import static ch.vd.unireg.common.WithoutSpringTest.assertEmpty;
import static ch.vd.unireg.common.WithoutSpringTest.date;
import static org.junit.Assert.assertEquals;

public class PeriodeExploitationServiceTest {

	private PeriodeExploitationServiceImpl service;

	@Before
	public void setUp() throws Exception {
		final ProxyServiceInfrastructureService serviceInfra = new ProxyServiceInfrastructureService();
		serviceInfra.setUpDefault();

		final RegimeFiscalServiceImpl regimeFiscalService = new RegimeFiscalServiceImpl();
		regimeFiscalService.setServiceInfra(serviceInfra);

		service = new PeriodeExploitationServiceImpl();
		service.setParametreAppService(new MockParameterAppService());
		service.setRegimeFiscalService(regimeFiscalService);
	}

	/**
	 * Vérifie qu'une entreprise sans régime fiscal n'a pas de période d'exploitation.
	 */
	@Test
	public void testDetermineEntrepriseSansRegimeFiscal() {

		final Entreprise entreprise = new Entreprise();

		final List<PeriodeExploitation> periodes = service.determinePeriodesExploitation(entreprise, PeriodeContext.THEORIQUE);
		assertEmpty(periodes);
	}

	/**
	 * Vérifie qu'une entreprise avec un régime fiscal autre que <i>société de personne</i> n'a pas de période d'exploitation.
	 */
	@Test
	public void testDetermineEntrepriseAvecRegimeFiscalOrdinaire() {

		final Entreprise entreprise = new Entreprise();
		entreprise.addRegimeFiscal(new RegimeFiscal(date(2009, 1, 1), null, RegimeFiscal.Portee.VD, MockTypeRegimeFiscal.ORDINAIRE_PM.getCode()));

		final List<PeriodeExploitation> periodes = service.determinePeriodesExploitation(entreprise, PeriodeContext.THEORIQUE);
		assertEmpty(periodes);
	}

	/**
	 * Vérifie qu'une entreprise avec un régime fiscal <i>société de personne</i> actif avant 2009 n'a pas de période d'exploitation.
	 */
	@Test
	public void testDetermineEntrepriseAvecRegimeFiscalSPAvant2009() {

		final Entreprise entreprise = new Entreprise();
		entreprise.addRegimeFiscal(new RegimeFiscal(date(2000, 1, 1), date(2004, 12, 31), RegimeFiscal.Portee.VD, MockTypeRegimeFiscal.SOCIETE_PERS.getCode()));

		final List<PeriodeExploitation> periodes = service.determinePeriodesExploitation(entreprise, PeriodeContext.THEORIQUE);
		assertEmpty(periodes);
	}

	/**
	 * Vérifie qu'une entreprise sans for fiscal n'a pas de période d'exploitation.
	 */
	@Test
	public void testDetermineEntrepriseSansForFiscal() {

		final Entreprise entreprise = new Entreprise();
		entreprise.addRegimeFiscal(new RegimeFiscal(date(2009, 1, 1), null, RegimeFiscal.Portee.VD, MockTypeRegimeFiscal.SOCIETE_PERS.getCode()));
		entreprise.setForsFiscaux(Collections.emptySet());

		final List<PeriodeExploitation> periodes = service.determinePeriodesExploitation(entreprise, PeriodeContext.THEORIQUE);
		assertEmpty(periodes);
	}

	/**
	 * Vérifie qu'une entreprise sans for fiscal vaudois n'a pas de période d'exploitation.
	 */
	@Test
	public void testDetermineEntrepriseSansForFiscalVaudois() {

		final ForFiscalPrincipalPM ffp = new ForFiscalPrincipalPM();
		ffp.setDateDebut(date(2000, 1, 1));
		ffp.setGenreImpot(GenreImpot.REVENU_FORTUNE);
		ffp.setTypeAutoriteFiscale(TypeAutoriteFiscale.COMMUNE_HC);
		ffp.setNumeroOfsAutoriteFiscale(MockCommune.Geneve.getNoOFS());

		final Entreprise entreprise = new Entreprise();
		entreprise.addRegimeFiscal(new RegimeFiscal(date(2009, 1, 1), null, RegimeFiscal.Portee.VD, MockTypeRegimeFiscal.SOCIETE_PERS.getCode()));
		entreprise.addForFiscal(ffp);

		final List<PeriodeExploitation> periodes = service.determinePeriodesExploitation(entreprise, PeriodeContext.THEORIQUE);
		assertEmpty(periodes);
	}

	/**
	 * Vérifie qu'une entreprise avec un for fiscal vaudois actif avant 2009 n'a pas de période d'exploitation.
	 */
	@Test
	public void testDetermineEntrepriseAvecForFiscalVaudoisAvant2009() {

		final ForFiscalPrincipalPM ffp = new ForFiscalPrincipalPM();
		ffp.setDateDebut(date(2000, 1, 1));
		ffp.setDateFin(date(2004, 12, 31));
		ffp.setGenreImpot(GenreImpot.REVENU_FORTUNE);
		ffp.setTypeAutoriteFiscale(TypeAutoriteFiscale.COMMUNE_OU_FRACTION_VD);
		ffp.setNumeroOfsAutoriteFiscale(MockCommune.Lausanne.getNoOFS());

		final Entreprise entreprise = new Entreprise();
		entreprise.addRegimeFiscal(new RegimeFiscal(date(2009, 1, 1), null, RegimeFiscal.Portee.VD, MockTypeRegimeFiscal.SOCIETE_PERS.getCode()));
		entreprise.addForFiscal(ffp);

		final List<PeriodeExploitation> periodes = service.determinePeriodesExploitation(entreprise, PeriodeContext.THEORIQUE);
		assertEmpty(periodes);
	}

	/**
	 * Vérifie qu'une entreprise SNC avec un régime fiscal <i>société de personne</i> et un for fiscal vaudois possède les bonnes périodes d'exploitation théoriques.
	 */
	@Test
	public void testDeterminePeriodesTheoriques() {

		final ForFiscalPrincipalPM ffp = new ForFiscalPrincipalPM();
		ffp.setDateDebut(date(2000, 1, 1));
		ffp.setDateFin(date(2018, 12, 31));
		ffp.setGenreImpot(GenreImpot.REVENU_FORTUNE);
		ffp.setTypeAutoriteFiscale(TypeAutoriteFiscale.COMMUNE_OU_FRACTION_VD);
		ffp.setNumeroOfsAutoriteFiscale(MockCommune.Lausanne.getNoOFS());

		final Entreprise entreprise = new Entreprise();
		entreprise.addRegimeFiscal(new RegimeFiscal(date(2009, 1, 1), null, RegimeFiscal.Portee.VD, MockTypeRegimeFiscal.SOCIETE_PERS.getCode()));
		entreprise.addForFiscal(ffp);

		// théorique : à partir de 2016
		final List<PeriodeExploitation> periodes = service.determinePeriodesExploitation(entreprise, PeriodeContext.THEORIQUE);
		assertEquals(10, periodes.size());
		assertRange(date(2009, 1, 1), date(2009, 12, 31), periodes.get(0).getDateRange());
		assertRange(date(2010, 1, 1), date(2010, 12, 31), periodes.get(1).getDateRange());
		assertRange(date(2011, 1, 1), date(2011, 12, 31), periodes.get(2).getDateRange());
		assertRange(date(2012, 1, 1), date(2012, 12, 31), periodes.get(3).getDateRange());
		assertRange(date(2013, 1, 1), date(2013, 12, 31), periodes.get(4).getDateRange());
		assertRange(date(2014, 1, 1), date(2014, 12, 31), periodes.get(5).getDateRange());
		assertRange(date(2015, 1, 1), date(2015, 12, 31), periodes.get(6).getDateRange());
		assertRange(date(2016, 1, 1), date(2016, 12, 31), periodes.get(7).getDateRange());
		assertRange(date(2017, 1, 1), date(2017, 12, 31), periodes.get(8).getDateRange());
		assertRange(date(2018, 1, 1), date(2018, 12, 31), periodes.get(9).getDateRange());
	}

	/**
	 * Vérifie qu'une entreprise SNC avec un régime fiscal <i>société de personne</i> et un for fiscal vaudois possède les bonnes périodes d'exploitation pour l'envoi automatique.
	 */
	@Test
	public void testDeterminePeriodesEnvoiAutomatique() {

		final ForFiscalPrincipalPM ffp = new ForFiscalPrincipalPM();
		ffp.setDateDebut(date(2000, 1, 1));
		ffp.setDateFin(date(2018, 12, 31));
		ffp.setGenreImpot(GenreImpot.REVENU_FORTUNE);
		ffp.setTypeAutoriteFiscale(TypeAutoriteFiscale.COMMUNE_OU_FRACTION_VD);
		ffp.setNumeroOfsAutoriteFiscale(MockCommune.Lausanne.getNoOFS());

		final Entreprise entreprise = new Entreprise();
		entreprise.addRegimeFiscal(new RegimeFiscal(date(2009, 1, 1), null, RegimeFiscal.Portee.VD, MockTypeRegimeFiscal.SOCIETE_PERS.getCode()));
		entreprise.addForFiscal(ffp);

		// envoi automatique : à partir de 2016
		final List<PeriodeExploitation> periodes = service.determinePeriodesExploitation(entreprise, PeriodeContext.ENVOI_AUTO);
		assertEquals(3, periodes.size());
		assertRange(date(2016, 1, 1), date(2016, 12, 31), periodes.get(0).getDateRange());
		assertRange(date(2017, 1, 1), date(2017, 12, 31), periodes.get(1).getDateRange());
		assertRange(date(2018, 1, 1), date(2018, 12, 31), periodes.get(2).getDateRange());
	}

	/**
	 * Cas d'un for fiscal qui s'arrête en cours d'année (exemple C de la spécification <i>SCU-Gérer questionnaires SNC.doc</i>).
	 */
	@Test
	public void testDeterminePeriodesForFiscalQuiSArreteEnCoursDAnnee() {

		final int annee = 2015;

		final ForFiscalPrincipalPM ffp = new ForFiscalPrincipalPM();
		ffp.setDateDebut(date(annee - 1, 1, 1));
		ffp.setDateFin(date(annee, 6, 30));     // <--- arrêt en cours d'année
		ffp.setGenreImpot(GenreImpot.REVENU_FORTUNE);
		ffp.setTypeAutoriteFiscale(TypeAutoriteFiscale.COMMUNE_OU_FRACTION_VD);
		ffp.setNumeroOfsAutoriteFiscale(MockCommune.Lausanne.getNoOFS());

		final Entreprise entreprise = new Entreprise();
		entreprise.addRegimeFiscal(new RegimeFiscal(date(2009, 1, 1), null, RegimeFiscal.Portee.VD, MockTypeRegimeFiscal.SOCIETE_PERS.getCode()));
		entreprise.addForFiscal(ffp);

		final List<PeriodeExploitation> periodes = service.determinePeriodesExploitation(entreprise, PeriodeContext.THEORIQUE);
		assertEquals(2, periodes.size());
		assertRange(date(annee - 1, 1, 1), date(annee - 1, 12, 31), periodes.get(0).getDateRange());
		assertRange(date(annee, 1, 1), date(annee, 6, 30), periodes.get(1).getDateRange());    // <-- période limitée
	}

	/**
	 * Cas d'un for fiscal qui commence en cours d'année (exemple D de la spécification <i>SCU-Gérer questionnaires SNC.doc</i>).
	 */
	@Test
	public void testDeterminePeriodesForFiscalQuiCommenceEnCoursDAnnee() {

		final int annee = 2015;

		final ForFiscalPrincipalPM ffp = new ForFiscalPrincipalPM();
		ffp.setDateDebut(date(annee, 7, 1));        // <-- début en cours d'année
		ffp.setDateFin(date(annee + 1, 12, 31));
		ffp.setGenreImpot(GenreImpot.REVENU_FORTUNE);
		ffp.setTypeAutoriteFiscale(TypeAutoriteFiscale.COMMUNE_OU_FRACTION_VD);
		ffp.setNumeroOfsAutoriteFiscale(MockCommune.Lausanne.getNoOFS());

		final Entreprise entreprise = new Entreprise();
		entreprise.addRegimeFiscal(new RegimeFiscal(date(2009, 1, 1), null, RegimeFiscal.Portee.VD, MockTypeRegimeFiscal.SOCIETE_PERS.getCode()));
		entreprise.addForFiscal(ffp);

		final List<PeriodeExploitation> periodes = service.determinePeriodesExploitation(entreprise, PeriodeContext.THEORIQUE);
		assertEquals(2, periodes.size());
		assertRange(date(annee, 7, 1), date(annee, 12, 31), periodes.get(0).getDateRange());       // <-- période limitée
		assertRange(date(annee + 1, 1, 1), date(annee + 1, 12, 31), periodes.get(1).getDateRange());
	}

	/**
	 * Cas d'un for fiscal qui commence et s'arrête en cours d'année (exemple E de la spécification <i>SCU-Gérer questionnaires SNC.doc</i>).
	 */
	@Test
	public void testDeterminePeriodesForFiscalQuiCommenceEtSArreteEnCoursDAnnee() {

		final int annee = 2015;

		final ForFiscalPrincipalPM ffp = new ForFiscalPrincipalPM();
		ffp.setDateDebut(date(annee, 7, 1));        // <-- début en cours d'année
		ffp.setDateFin(date(annee, 10, 25));        // <-- fin en cours d'année
		ffp.setGenreImpot(GenreImpot.REVENU_FORTUNE);
		ffp.setTypeAutoriteFiscale(TypeAutoriteFiscale.COMMUNE_OU_FRACTION_VD);
		ffp.setNumeroOfsAutoriteFiscale(MockCommune.Lausanne.getNoOFS());

		final Entreprise entreprise = new Entreprise();
		entreprise.addRegimeFiscal(new RegimeFiscal(date(2009, 1, 1), null, RegimeFiscal.Portee.VD, MockTypeRegimeFiscal.SOCIETE_PERS.getCode()));
		entreprise.addForFiscal(ffp);

		final List<PeriodeExploitation> periodes = service.determinePeriodesExploitation(entreprise, PeriodeContext.THEORIQUE);
		assertEquals(1, periodes.size());
		assertRange(date(annee, 7, 1), date(annee, 10, 25), periodes.get(0).getDateRange());       // <-- période limitée
	}

	/**
	 * Cas avec deux fors fiscaux qui se suivent sans interruption en cours d'année (exemple G de la spécification <i>SCU-Gérer questionnaires SNC.doc</i>).
	 */
	@Test
	public void testDeterminePeriodesForsFiscauxQuiSeSuiventSansInterruption() {

		final int annee = 2015;

		final ForFiscalPrincipalPM ffp1 = new ForFiscalPrincipalPM();
		ffp1.setDateDebut(date(annee - 1, 1, 1));
		ffp1.setDateFin(date(annee, 6, 30));        // <-- fin en cours d'année
		ffp1.setGenreImpot(GenreImpot.REVENU_FORTUNE);
		ffp1.setTypeAutoriteFiscale(TypeAutoriteFiscale.COMMUNE_OU_FRACTION_VD);
		ffp1.setNumeroOfsAutoriteFiscale(MockCommune.Lausanne.getNoOFS());

		final ForFiscalPrincipalPM ffp2 = new ForFiscalPrincipalPM();
		ffp2.setDateDebut(date(annee, 7, 1));       // <-- début en cours d'année, le lendemain de la fermeture du for précédent
		ffp2.setDateFin(date(annee + 1, 12, 31));
		ffp2.setGenreImpot(GenreImpot.REVENU_FORTUNE);
		ffp2.setTypeAutoriteFiscale(TypeAutoriteFiscale.COMMUNE_OU_FRACTION_VD);
		ffp2.setNumeroOfsAutoriteFiscale(MockCommune.Lausanne.getNoOFS());

		final Entreprise entreprise = new Entreprise();
		entreprise.addRegimeFiscal(new RegimeFiscal(date(2009, 1, 1), null, RegimeFiscal.Portee.VD, MockTypeRegimeFiscal.SOCIETE_PERS.getCode()));
		entreprise.addForFiscal(ffp1);
		entreprise.addForFiscal(ffp2);

		final List<PeriodeExploitation> periodes = service.determinePeriodesExploitation(entreprise, PeriodeContext.THEORIQUE);
		assertEquals(3, periodes.size());
		assertRange(date(annee - 1, 1, 1), date(annee - 1, 12, 31), periodes.get(0).getDateRange());
		assertRange(date(annee, 1, 1), date(annee, 12, 31), periodes.get(1).getDateRange());       // <-- période complète
		assertRange(date(annee + 1, 1, 1), date(annee + 1, 12, 31), periodes.get(2).getDateRange());
	}

	/**
	 * Cas avec deux fors fiscaux qui se suivent avec interruption en cours d'année (exemple K de la spécification <i>SCU-Gérer questionnaires SNC.doc</i>).
	 */
	@Test
	public void testDeterminePeriodesForsFiscauxQuiSeSuiventAvecInterruption() {

		final int annee = 2015;

		final ForFiscalPrincipalPM ffp1 = new ForFiscalPrincipalPM();
		ffp1.setDateDebut(date(annee - 1, 1, 1));
		ffp1.setDateFin(date(annee, 6, 30));        // <-- fin en cours d'année
		ffp1.setGenreImpot(GenreImpot.REVENU_FORTUNE);
		ffp1.setTypeAutoriteFiscale(TypeAutoriteFiscale.COMMUNE_OU_FRACTION_VD);
		ffp1.setNumeroOfsAutoriteFiscale(MockCommune.Lausanne.getNoOFS());

		final ForFiscalPrincipalPM ffp2 = new ForFiscalPrincipalPM();
		ffp2.setDateDebut(date(annee, 10, 1));       // <-- début en cours d'année, bien plus tard que de la fermeture du for précédent
		ffp2.setDateFin(date(annee + 1, 12, 31));
		ffp2.setGenreImpot(GenreImpot.REVENU_FORTUNE);
		ffp2.setTypeAutoriteFiscale(TypeAutoriteFiscale.COMMUNE_OU_FRACTION_VD);
		ffp2.setNumeroOfsAutoriteFiscale(MockCommune.Lausanne.getNoOFS());

		final Entreprise entreprise = new Entreprise();
		entreprise.addRegimeFiscal(new RegimeFiscal(date(2009, 1, 1), null, RegimeFiscal.Portee.VD, MockTypeRegimeFiscal.SOCIETE_PERS.getCode()));
		entreprise.addForFiscal(ffp1);
		entreprise.addForFiscal(ffp2);

		final List<PeriodeExploitation> periodes = service.determinePeriodesExploitation(entreprise, PeriodeContext.THEORIQUE);
		assertEquals(3, periodes.size());
		assertRange(date(annee - 1, 1, 1), date(annee - 1, 12, 31), periodes.get(0).getDateRange());
		assertRange(date(annee, 1, 1), date(annee, 12, 31), periodes.get(1).getDateRange());       // <-- période complète
		assertRange(date(annee + 1, 1, 1), date(annee + 1, 12, 31), periodes.get(2).getDateRange());
	}

	/**
	 * Cas avec deux fors fiscaux qui commencent et s'arrêtent dans la même année mais avec interruption.
	 */
	@Test
	public void testDeterminePeriodesForsFiscauxQuiCommencentEtSArretentAvecInterruptionDansLAnnee() {

		final int annee = 2015;

		final ForFiscalPrincipalPM ffp1 = new ForFiscalPrincipalPM();
		ffp1.setDateDebut(date(annee, 3, 1));       // <-- début en cours d'année
		ffp1.setDateFin(date(annee, 6, 30));        // <-- fin en cours d'année
		ffp1.setGenreImpot(GenreImpot.REVENU_FORTUNE);
		ffp1.setTypeAutoriteFiscale(TypeAutoriteFiscale.COMMUNE_OU_FRACTION_VD);
		ffp1.setNumeroOfsAutoriteFiscale(MockCommune.Lausanne.getNoOFS());

		final ForFiscalPrincipalPM ffp2 = new ForFiscalPrincipalPM();
		ffp2.setDateDebut(date(annee, 10, 1));       // <-- début en cours d'année, bien plus tard que de la fermeture du for précédent
		ffp2.setDateFin(date(annee, 12, 7));         // <-- fin en cours d'année
		ffp2.setGenreImpot(GenreImpot.REVENU_FORTUNE);
		ffp2.setTypeAutoriteFiscale(TypeAutoriteFiscale.COMMUNE_OU_FRACTION_VD);
		ffp2.setNumeroOfsAutoriteFiscale(MockCommune.Lausanne.getNoOFS());

		final Entreprise entreprise = new Entreprise();
		entreprise.addRegimeFiscal(new RegimeFiscal(date(2009, 1, 1), null, RegimeFiscal.Portee.VD, MockTypeRegimeFiscal.SOCIETE_PERS.getCode()));
		entreprise.addForFiscal(ffp1);
		entreprise.addForFiscal(ffp2);

		final List<PeriodeExploitation> periodeExploitations = service.determinePeriodesExploitation(entreprise, PeriodeContext.THEORIQUE);
		assertEquals(1, periodeExploitations.size());
		assertRange(date(annee, 3, 1), date(annee, 12, 7), periodeExploitations.get(0).getDateRange());       // <-- période réduite
	}
}